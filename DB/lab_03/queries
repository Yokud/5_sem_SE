-- 1. Скалярная функция
drop function if exists AvgPopulationDiff(popul integer);

create or replace function AvgPopulationDiff(popul integer) returns real as $$
begin
	return (select popul - avg(Population) from Towns);
end;
$$ language plpgsql;

select Name, Population, AvgPopulationDiff(Population)
from Towns;

-- 2. Подставляемая табличная функция
drop function if exists Shops_n_Merchants();

create or replace function Shops_n_Merchants() returns table(shop_name nchar, shop_merch nchar, merchnt_name nchar, merchnt_gender nchar) as $$
begin
	return query (select Shops.Name, Shops.Merchandise, Merchants.Name, Merchants.Gender
	from Merchants join Shops on Merchants.Id = Shops.Id_merchant);
end;
$$ language plpgsql;

select *
from Shops_n_Merchants();

-- 3. Многооператорная табличная функция
drop function if exists BookShops(town_id integer);

create or replace function BookShops(town_id integer) returns table(shop_name nchar, can_invest bool, hours_start time, hours_end time, town_name nchar) as $$
begin
	drop table if exists tbl;
	create temp table tbl (shop_name nchar, can_invest bool, hours_start time, hours_end time, town_name nchar);
	
	insert into tbl
	select Shops.Name, Shops.Can_invest, Shops.Hours_start, Shops.Hours_end, Towns.Name
	from Towns join Shops on Towns.Id = Shops.id_town
	where Towns.Id = town_id;
	
	return query select * from tbl;
end;
$$ language plpgsql;

select *
from BookShops(300);

-- 4. Рекурсивная функция
drop function if exists VassalsLevel();

create temp table Vassals (Id integer, Name nchar(50), Id_vassal integer);

insert into Vassals
select Id, Ruler, 3571 * Id % 1001
from Towns;

update Vassals
set Id_vassal = 0
where Id in (select Id
		   from Towns
		   where Name = 'Солитьюд' or Name = 'Виндхельм');

create or replace function VassalsLevel() returns table(Id integer, Name nchar, Id_vassal integer, Level integer) as $$
begin
	return query 
		with recursive rec(Id, Name, Id_vassal, Level) as (
			select Vassals.Id, Vassals.Name, Vassals.Id_vassal, 0 as Level
			from Vassals
			where Vassals.Id_vassal = 0

			union all

			select v.Id, v.Name, v.Id_vassal, vl.Level + 1
			from Vassals as v join rec as vl on v.Id_vassal = vl.Id
		)
		select * from rec;
end;
$$ language plpgsql;

select *
from VassalsLevel()

-- 5. Хранимая процедура с параметрами
drop procedure if exists ChangeRuler(town_id int, ruler_name nchar(50));

create or replace procedure ChangeRuler(town_id int, ruler_name nchar(50)) as $$
begin
	update Towns
	set Ruler = ruler_name
	where Id = town_id;
end;
$$ language plpgsql;

call ChangeRuler(555, 'Пятёрка');

select *
from Towns
where Id = 555;

-- 6. 